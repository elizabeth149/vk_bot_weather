import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import random
from data import db_session
from data.answer import Answer

db_session.global_init("db/blogs.sqlite")
vk_session = vk_api.VkApi(
    token='f4a19a52663f6a229df74dee17a5a23e5d7f05cd4aabf1aefc00102492d7144c6b7707cb1a70de7b1b7ed')
start = "start"
answer = Answer()
id_sp = []


def dontknow(id):
    vk = vk_session.get_api()
    vk.messages.send(user_id=id,
                     message='''
–ö —Ç–∞–∫–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —è –±—ã–ª –Ω–µ –≥–æ—Ç–æ–≤...ü§î‚ùÑ''',
                     random_id=random.randint(0, 2 ** 64))


def message_start(text, id):
    global start
    global answer
    if start == "otvet":
        if text == "–î–∞":
            vk = vk_session.get_api()
            vk.messages.send(user_id=id,
                             message='''
–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –º–Ω–µ —Å—Ç–æ–∏—Ç –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? ‚òÄ''',
                             random_id=random.randint(0, 2 ** 64))
        elif text == "–ù–µ—Ç":
            vk = vk_session.get_api()
            vk.messages.send(user_id=id,
                             message='''
–û—á–µ–Ω—å –∂–∞–ª—å, –ø—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –µ—â–µ!üåÇ''',
                             random_id=random.randint(0, 2 ** 64))
        else:
            dontknow(id)
    else:
        vk = vk_session.get_api()
        vk.messages.send(user_id=id,
                         message='''
–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –ø—Ä–æ–∂–∏–≤–∞–µ—à—å? ‚òÇüèô''',
                         random_id=random.randint(0, 2 ** 64))



def registerbd(text, id):
    global start
    vk = vk_session.get_api()
    vk.messages.send(user_id=id,
                     message=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {answer.name}! "
                             f"–ß—É—Ç—å –ø–æ–∑–∂–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ"
                             f" {answer.town} –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüòâüå¶",
                     random_id=random.randint(0, 2 ** 64))


def main():
    global start
    global answer
    longpoll = VkBotLongPoll(vk_session, 193486299)
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            session = db_session.create_session()
            id_nach = event.obj.message['from_id']
            if id_nach not in id_sp:
                id_sp.append(id_nach)
                answer.ans = "start"
                answer.id = event.obj.message['from_id']
                session.add(answer)
                session.commit()
                start = answer.ans
            else:
                start = answer.ans
            if start == "start":
                vk = vk_session.get_api()
                vk.messages.send(user_id=event.obj.message['from_id'],
                                 message='''–ü—Ä–∏–≤–µ—Ç ‚òÄ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.
–Ø - –ë–æ—Ç –ü–æ–≥–æ–¥–∞.
–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
–ù–∞—á–Ω—ë–º?üå¶

–î–∞/–ù–µ—Ç''',
                                 random_id=random.randint(0, 2 ** 64))
                answer = session.query(Answer).filter(Answer.id == id_nach).first()
                answer.ans = "otvet"
                session.commit()
            elif start == "otvet":
                message_start(event.obj.message['text'],
                              event.obj.message['from_id'])
                answer = session.query(Answer).filter(
                    Answer.id == id_nach).first()
                answer.ans = "register"
                session.commit()
            elif start == "register":
                message_start(event.obj.message['text'],
                              event.obj.message['from_id'])
                answer = session.query(Answer).filter(
                    Answer.id == id_nach).first()
                answer.ans = "town"
                answer.name = event.obj.message['text']
                session.commit()
            elif start == "town":
                answer = session.query(Answer).filter(
                    Answer.id == id_nach).first()
                answer.town = event.obj.message['text']
                session.commit()
                registerbd(event.obj.message['text'], event.obj.message['from_id'])
                answer = session.query(Answer).filter(
                    Answer.id == id_nach).first()
                answer.ans = "...."
                session.commit()


if __name__ == '__main__':
    main()
